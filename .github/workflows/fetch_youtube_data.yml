name: Fetch YouTube Data and Ingest into Port

on:
  workflow_dispatch:
    inputs:
     youtube_url:
        description: "the desired YouTube Source's URL"
        required: true
        type: string

jobs:
  fetch-and-ingest:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests google-api-python-client

    - name: Fetch Youtube Data and Ingest into Port
      env:
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }} # Youtube API key, acquired from Google Cloud Console
        PORT_API_KEY: ${{ secrets.PORT_API_KEY }}       # Port API key, acquired from Port
      run: |
        python <<EOF
        import os
        import requests
        from urllib.parse import urlparse, parse_qs
        from googleapiclient.discovery import build
        from datetime import datetime

        # Inputs and API keys
        youtube_url = "${{ github.event.inputs.youtube_url }}"
        youtube_api_key = os.environ['YOUTUBE_API_KEY']
        port_api_key = os.environ['PORT_API_KEY']
        port_url = "https://ingest.getport.io/OxySO1wS0HYHaEJ2"  # Port Webhook specific URL

        # Parse the input URL
        query_params = parse_qs(urlparse(youtube_url).query)
        playlist_id = query_params.get("list", [None])[0]
        single_video_id = query_params.get("v", [None])[0]
        if not (playlist_id or single_video_id):
            raise ValueError("Invalid URL. Provide a valid YouTube playlist or video link.")

        # Initialize YouTube API client
        youtube = build('youtube', 'v3', developerKey=youtube_api_key)

        # Headers for Port API request
        headers = {
            "Content-Type": "application/json",
            "Authorization": port_api_key
        }

        # Verify blueprint existence and accessibility
        response = requests.get(f"https://api.getport.io/v1/blueprints/youtube_data_blueprint", headers=headers) # change 'youtube_data_blueprint' to match the desired blueprint's name
        print(f"Blueprint check response: {response.status_code}")
        print(f"Response Text: {response.text}")
        if response.status_code != 200:
            raise Exception(f"Blueprint 'youtube_data_blueprint' check failed with status: {response.status_code} and message: {response.text}")

        # Function to ingest video data into Port
        def ingest_video(video_id):
            # Fetch video details
            video_response = youtube.videos().list(
                part="snippet,statistics",
                id=video_id
            ).execute()

            if not video_response.get("items"):
                raise ValueError(f"Video with ID {video_id} not found.")

            video_data = video_response["items"][0]
            snippet = video_data["snippet"]
            stats = video_data["statistics"]

            # Parse and format the upload date
            # published_at = snippet["publishedAt"]
            # dt = datetime.fromisoformat(published_at.replace("Z", "+00:00"))
            # formatted_date = dt.strftime("%d %b, %Y, %H:%M")

            # Prepare the payload
            payload = {
                "identifier": video_id,
                "title": snippet["title"],
                "icon": "Default",
                "entity": {
                    "identifier": video_id,
                    "title": snippet["title"],
                    "properties": {
                        "youtube_account_owner": snippet["channelTitle"],
                        # "youtube_upload_date": published_at,
                        "youtube_views_count": int(stats.get("viewCount", 0)),
                        "youtube_comments_count": int(stats.get("commentCount", 0)),
                        "youtube_video_url": f"https://www.youtube.com/watch?v={video_id}"
                    }
                }
            }

            # Log the Payload
            print(payload)

            # Ingest into Port
            response = requests.post(port_url, json=payload, headers=headers)
            
            # Log response status and content
            print(f"Status Code: {response.status_code}")
            print(f"Response Headers: {response.headers}")
            print(f"Response Text: {response.text}")

            if response.status_code != 200:
                raise Exception(f"Failed to ingest video {snippet['title']}")
            
        # If it's a playlist, fetch all videos
        if playlist_id:
            next_page_token = None
            while True:
                playlist_response = youtube.playlistItems().list(
                    part="snippet",
                    playlistId=playlist_id,
                    maxResults=50,
                    pageToken=next_page_token
                ).execute()

                for item in playlist_response.get("items", []):
                    video_id = item["snippet"]["resourceId"]["videoId"]
                    ingest_video(video_id)

                # Check if more pages exist
                next_page_token = playlist_response.get("nextPageToken")
                if not next_page_token:
                    break
        elif single_video_id:  # If it's a single video
            ingest_video(single_video_id)
        EOF
